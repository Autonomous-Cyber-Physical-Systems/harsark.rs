initSidebarItems({"fn":[["block_tasks","The Kernel blocks the tasks mentioned in `tasks_mask`."],["context_switch","Assigns the appropriate values to `os_curr_task` and `os_next_task` and raises the PendSV interrupt. PendSV interrupt handler does the actual context switch."],["create_task","Create a new task with the configuration set as arguments passed."],["disable_preemption","Disables preemptive scheduling."],["enable_preemption","Enables preemptive scheduling."],["get_curr_tid","Returns the TaskId of the currently running task in the kernel."],["init","Initialize the switcher system"],["is_preemptive","Returns if the scheduler is currently operating preemptively or not."],["preempt","If the scheduler is running and the highest priority task and currently running task aren’t the same, then the context switch function is called."],["release","The Kernel releases the tasks in the `task_mask`, these tasks transition from the waiting to the ready state."],["schedule","This function is called from both privileged and unprivileged context. Hence if the function is called from privileged context, then `preempt()` is called. Else, the `svc_call()` is executed, this function creates the SVC exception. And the SVC handler calls schedule again. Thus, the permission level is raised to privileged via the exception."],["start_kernel","Starts the Kernel scheduler, which starts scheduling tasks and starts the SysTick timer using the reference of the Peripherals instance and the `tick_interval`. `tick_interval` specifies the the frequency of the timer interrupt. The SysTick exception updates the kernel regarding the time elapsed, which is used to dispatch events and schedule tasks."],["task_exit","The `task_exit` function is called just after a task finishes execution. This function unsets the task’s corresponding bit in the `active_tasks` and calls schedule. Hence in the next call to schedule, the kernel schedules some other task."],["unblock_tasks","The Kernel unblocks the tasks mentioned in tasks_mask."]],"static":[["all_tasks","Global Scheduler instance"],["empty_task",""],["os_curr_task","Reference to TCB of currently running task"],["os_next_task","Reference to TCB of next to be scheduled task"]]});