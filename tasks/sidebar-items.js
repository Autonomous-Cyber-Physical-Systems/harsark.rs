initSidebarItems({"fn":[["create_task","Create a new task with the configuration set as arguments passed."],["disable_preemption","Disables preemptive scheduling."],["enable_preemption","Enables preemptive scheduling."],["get_curr_tid","Returns the TaskId of the currently running task in the kernel."],["init","Initializes the Kernel scheduler. `is_preemptive` defines if the Kernel should operating preemptively  or not. This method sets the `is_preemptive` field of the Scheduler instance and creates the idle task.  The idle task is created with zero priority; hence, it is only executed when no other task is in Ready state."],["is_preemptive","Returns if the scheduler is currently operating preemptively or not."],["release","The Kernel releases the tasks in the `task_mask`, these tasks transition from the waiting to the ready state."],["start_kernel","Starts the Kernel scheduler, which starts scheduling tasks and starts the SysTick timer using the reference of the Peripherals instance and the `tick_interval`. `tick_interval` specifies the frequency of the timer interrupt. The SysTick exception updates the kernel regarding the time elapsed, which is used to dispatch events and schedule tasks."],["task_exit","The `task_exit` function is called just after a task finishes execution. This function unsets the taskâ€™s corresponding bit in the `active_tasks` and calls schedule. Hence in the next call to schedule, the kernel schedules some other task."]]});